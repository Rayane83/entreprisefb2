#!/bin/bash

# üîç DIAGNOSTIC COMPLET - Identifier tous les probl√®mes

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

echo -e "${PURPLE}üîç DIAGNOSTIC COMPLET - FLASHBACK FA ENTREPRISE${NC}"
echo "================================================================"

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BACKEND_DIR="$SCRIPT_DIR/backend"
FRONTEND_DIR="$SCRIPT_DIR/frontend"
VENV_DIR="$SCRIPT_DIR/venv"

# Fonction: Diagnostic syst√®me
diagnostic_system() {
    echo -e "${BLUE}üìä DIAGNOSTIC SYST√àME${NC}"
    echo "R√©pertoire courant: $SCRIPT_DIR"
    echo "Utilisateur: $(whoami)"
    echo "OS: $(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)"
    echo "Python: $(python3 --version)"
    echo "Node: $(node --version 2>/dev/null || echo 'Non install√©')"
    echo "Yarn: $(yarn --version 2>/dev/null || echo 'Non install√©')"
    echo "NPM: $(npm --version 2>/dev/null || echo 'Non install√©')"
    echo ""
}

# Fonction: Diagnostic structure fichiers
diagnostic_structure() {
    echo -e "${BLUE}üìÅ DIAGNOSTIC STRUCTURE FICHIERS${NC}"
    
    echo "Structure du projet:"
    ls -la "$SCRIPT_DIR" | head -20
    echo ""
    
    echo "Backend directory:"
    if [[ -d "$BACKEND_DIR" ]]; then
        echo "‚úÖ $BACKEND_DIR existe"
        echo "Contenu:"
        ls -la "$BACKEND_DIR" | head -10
        
        # V√©rifier fichiers critiques
        [[ -f "$BACKEND_DIR/server.py" ]] && echo "‚úÖ server.py pr√©sent" || echo "‚ùå server.py manquant"
        [[ -f "$BACKEND_DIR/.env" ]] && echo "‚úÖ .env pr√©sent" || echo "‚ùå .env manquant"
        [[ -f "$BACKEND_DIR/requirements.txt" ]] && echo "‚úÖ requirements.txt pr√©sent" || echo "‚ùå requirements.txt manquant"
    else
        echo "‚ùå $BACKEND_DIR n'existe pas"
    fi
    echo ""
    
    echo "Frontend directory:"
    if [[ -d "$FRONTEND_DIR" ]]; then
        echo "‚úÖ $FRONTEND_DIR existe"
        echo "Contenu:"
        ls -la "$FRONTEND_DIR" | head -10
        
        [[ -f "$FRONTEND_DIR/package.json" ]] && echo "‚úÖ package.json pr√©sent" || echo "‚ùå package.json manquant"
        [[ -f "$FRONTEND_DIR/.env" ]] && echo "‚úÖ .env pr√©sent" || echo "‚ùå .env manquant"
        [[ -d "$FRONTEND_DIR/node_modules" ]] && echo "‚úÖ node_modules pr√©sent" || echo "‚ùå node_modules manquant"
    else
        echo "‚ùå $FRONTEND_DIR n'existe pas"
    fi
    echo ""
    
    echo "Environnement virtuel:"
    if [[ -d "$VENV_DIR" ]]; then
        echo "‚úÖ $VENV_DIR existe"
        [[ -f "$VENV_DIR/bin/activate" ]] && echo "‚úÖ activate script pr√©sent" || echo "‚ùå activate script manquant"
        [[ -f "$VENV_DIR/bin/python" ]] && echo "‚úÖ python venv pr√©sent" || echo "‚ùå python venv manquant"
    else
        echo "‚ùå $VENV_DIR n'existe pas"
    fi
    echo ""
}

# Fonction: Diagnostic environnement virtuel Python
diagnostic_python_venv() {
    echo -e "${BLUE}üêç DIAGNOSTIC ENVIRONNEMENT VIRTUEL PYTHON${NC}"
    
    if [[ -d "$VENV_DIR" ]]; then
        echo "Activation de l'environnement virtuel..."
        if source "$VENV_DIR/bin/activate" 2>/dev/null; then
            echo "‚úÖ Environnement virtuel activ√©"
            echo "Python venv: $(which python)"
            echo "Pip venv: $(which pip)"
            echo ""
            
            echo "Packages install√©s dans le venv:"
            pip list | head -20
            echo ""
            
            echo "Test des imports critiques:"
            python -c "
try:
    import fastapi
    print('‚úÖ FastAPI:', fastapi.__version__)
except ImportError as e:
    print('‚ùå FastAPI:', e)

try:
    import uvicorn
    print('‚úÖ Uvicorn:', uvicorn.__version__)
except ImportError as e:
    print('‚ùå Uvicorn:', e)

try:
    import sqlalchemy
    print('‚úÖ SQLAlchemy:', sqlalchemy.__version__)
except ImportError as e:
    print('‚ùå SQLAlchemy:', e)

try:
    import pymysql
    print('‚úÖ PyMySQL:', pymysql.__version__)
except ImportError as e:
    print('‚ùå PyMySQL:', e)
" 2>/dev/null || echo "‚ùå Erreur lors des tests d'import"
            
        else
            echo "‚ùå Impossible d'activer l'environnement virtuel"
        fi
    else
        echo "‚ùå Environnement virtuel non trouv√©"
    fi
    echo ""
}

# Fonction: Diagnostic base de donn√©es
diagnostic_database() {
    echo -e "${BLUE}üóÑÔ∏è  DIAGNOSTIC BASE DE DONN√âES${NC}"
    
    # Test MySQL
    if command -v mysql >/dev/null 2>&1; then
        echo "‚úÖ MySQL install√©: $(mysql --version)"
        
        # Test connexion root
        if mysql -u root -e "SELECT 1;" >/dev/null 2>&1; then
            echo "‚úÖ Connexion MySQL root OK"
            
            # Test base de donn√©es
            if mysql -u root -e "USE flashback_fa_enterprise; SELECT 1;" >/dev/null 2>&1; then
                echo "‚úÖ Base flashback_fa_enterprise existe"
            else
                echo "‚ùå Base flashback_fa_enterprise n'existe pas"
            fi
            
            # Test utilisateur flashback
            if mysql -u flashback_user -pFlashbackFA_2024! -e "SELECT 1;" >/dev/null 2>&1; then
                echo "‚úÖ Utilisateur flashback_user OK"
            else
                echo "‚ùå Utilisateur flashback_user probl√®me"
            fi
            
        else
            echo "‚ùå Connexion MySQL root √©choue"
        fi
    else
        echo "‚ùå MySQL non install√©"
    fi
    echo ""
}

# Fonction: Diagnostic fichiers de configuration
diagnostic_config() {
    echo -e "${BLUE}‚öôÔ∏è  DIAGNOSTIC CONFIGURATION${NC}"
    
    # Backend .env
    if [[ -f "$BACKEND_DIR/.env" ]]; then
        echo "‚úÖ Backend .env existe"
        echo "Contenu (sans secrets):"
        grep -E "^(DATABASE_URL|API_HOST|API_PORT|CORS_ORIGINS)" "$BACKEND_DIR/.env" | head -5
    else
        echo "‚ùå Backend .env manquant"
    fi
    echo ""
    
    # Frontend .env
    if [[ -f "$FRONTEND_DIR/.env" ]]; then
        echo "‚úÖ Frontend .env existe"
        echo "Contenu (sans secrets):"
        grep -E "^REACT_APP_" "$FRONTEND_DIR/.env" | head -5
    else
        echo "‚ùå Frontend .env manquant"
    fi
    echo ""
}

# Fonction: Test d√©marrage backend manuel
test_backend_manual() {
    echo -e "${BLUE}üîß TEST D√âMARRAGE BACKEND MANUEL${NC}"
    
    cd "$BACKEND_DIR"
    
    if [[ -d "$VENV_DIR" ]] && source "$VENV_DIR/bin/activate" 2>/dev/null; then
        echo "‚úÖ Environnement virtuel activ√©"
        
        if [[ -f "server.py" ]]; then
            echo "Test du d√©marrage backend (5 secondes)..."
            timeout 5s python server.py &
            SERVER_PID=$!
            sleep 2
            
            # Tester si le serveur r√©pond
            if curl -s http://localhost:8000/ >/dev/null 2>&1; then
                echo "‚úÖ Backend d√©marre et r√©pond"
            elif curl -s http://localhost:8000/health >/dev/null 2>&1; then
                echo "‚úÖ Backend d√©marre (health endpoint)"
            else
                echo "‚ùå Backend ne r√©pond pas"
                echo "Erreurs possibles:"
                python server.py 2>&1 | head -10 &
                sleep 2
            fi
            
            # Nettoyer
            kill $SERVER_PID 2>/dev/null || true
            pkill -f "python.*server.py" 2>/dev/null || true
        else
            echo "‚ùå server.py non trouv√©"
        fi
    else
        echo "‚ùå Impossible d'activer l'environnement virtuel"
    fi
    
    cd "$SCRIPT_DIR"
    echo ""
}

# Fonction: Diagnostic logs existants
diagnostic_logs() {
    echo -e "${BLUE}üìã DIAGNOSTIC LOGS${NC}"
    
    # Backend logs
    if [[ -f "$SCRIPT_DIR/backend_production.log" ]]; then
        echo "Backend logs (20 derni√®res lignes):"
        tail -n 20 "$SCRIPT_DIR/backend_production.log"
    else
        echo "‚ùå Pas de logs backend trouv√©s"
    fi
    echo ""
    
    # Frontend logs
    if [[ -f "$SCRIPT_DIR/frontend_production.log" ]]; then
        echo "Frontend logs (10 derni√®res lignes):"
        tail -n 10 "$SCRIPT_DIR/frontend_production.log"
    else
        echo "‚ùå Pas de logs frontend trouv√©s"
    fi
    echo ""
    
    # Nginx logs
    if [[ -f "/var/log/nginx/error.log" ]]; then
        echo "Nginx error logs (10 derni√®res lignes):"
        sudo tail -n 10 /var/log/nginx/error.log
    fi
    echo ""
}

# Fonction: Diagnostic processus actifs
diagnostic_processes() {
    echo -e "${BLUE}‚ö° DIAGNOSTIC PROCESSUS${NC}"
    
    echo "Processus Python actifs:"
    ps aux | grep python | grep -v grep || echo "Aucun processus Python"
    echo ""
    
    echo "Processus Node actifs:"
    ps aux | grep node | grep -v grep || echo "Aucun processus Node"
    echo ""
    
    echo "Ports ouverts (3000, 8000, 80, 443):"
    sudo netstat -tlnp 2>/dev/null | grep -E ":(3000|8000|80|443)" || echo "Aucun port trouv√©"
    echo ""
    
    # PIDs sauvegard√©s
    if [[ -f "$SCRIPT_DIR/.backend_pid" ]]; then
        SAVED_BACKEND_PID=$(cat "$SCRIPT_DIR/.backend_pid")
        if kill -0 "$SAVED_BACKEND_PID" 2>/dev/null; then
            echo "‚úÖ Backend PID $SAVED_BACKEND_PID actif"
        else
            echo "‚ùå Backend PID $SAVED_BACKEND_PID mort"
        fi
    fi
    
    if [[ -f "$SCRIPT_DIR/.frontend_pid" ]]; then
        SAVED_FRONTEND_PID=$(cat "$SCRIPT_DIR/.frontend_pid")
        if kill -0 "$SAVED_FRONTEND_PID" 2>/dev/null; then
            echo "‚úÖ Frontend PID $SAVED_FRONTEND_PID actif"
        else
            echo "‚ùå Frontend PID $SAVED_FRONTEND_PID mort"
        fi
    fi
    echo ""
}

# Fonction: Recommandations bas√©es sur le diagnostic
generate_recommendations() {
    echo -e "${RED}üéØ RECOMMANDATIONS${NC}"
    echo "================================================================"
    
    # Analyser et recommander
    echo "Bas√© sur le diagnostic ci-dessus, voici les actions recommand√©es:"
    echo ""
    
    if [[ ! -f "$BACKEND_DIR/server.py" ]]; then
        echo "üî¥ CRITIQUE: server.py manquant - Recr√©er le fichier backend"
    fi
    
    if [[ ! -d "$VENV_DIR" ]]; then
        echo "üî¥ CRITIQUE: Environnement virtuel manquant - Recr√©er le venv"
    fi
    
    if [[ ! -f "$BACKEND_DIR/.env" ]]; then
        echo "üî¥ CRITIQUE: Configuration backend manquante - Recr√©er .env"
    fi
    
    echo ""
    echo "üîß Actions recommand√©es:"
    echo "1. V√©rifier la structure de fichiers manquante"
    echo "2. Recr√©er l'environnement virtuel si corrompu"
    echo "3. R√©installer les d√©pendances Python"
    echo "4. Tester le d√©marrage manuel du backend"
    echo "5. Analyser les logs d'erreur"
    echo ""
}

# Fonction principale
main() {
    diagnostic_system
    diagnostic_structure
    diagnostic_python_venv
    diagnostic_database
    diagnostic_config
    test_backend_manual
    diagnostic_logs
    diagnostic_processes
    generate_recommendations
    
    echo -e "${GREEN}================================================================${NC}"
    echo -e "${GREEN}DIAGNOSTIC TERMIN√â - Analysez les r√©sultats ci-dessus${NC}"
    echo -e "${GREEN}================================================================${NC}"
}

# Lancer le diagnostic
main